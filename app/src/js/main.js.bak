'use strict';


angular
    .module('MenuMaker', ['angularFileUpload'])
    .factory('socket', function ($rootScope) {
        var socket = io.connect();
        return {
            on: function (eventName, callback) {
                socket.on(eventName, function () {
                    var args = arguments;
                    $rootScope.$apply(function () {
                        callback.apply(socket, args);
                    });
                });
            },
            emit: function (eventName, data, callback) {
                socket.emit(eventName, data, function () {
                    var args = arguments;
                    $rootScope.$apply(function () {
                        if (callback) {
                            callback.apply(socket, args);
                        }
                    });
                })
            }
        };
    })
    .constant('_', window._)
    // use in views, ng-repeat="x in _.range(3)"
    .run(function ($rootScope) {
        $rootScope._ = window._;
    })
    .controller('UploadXLSXController', function($scope, FileUploader) {
        $scope.uploaderXSLX = new FileUploader();
    })
    .controller('UploadImageController', function($scope, FileUploader, socket) {
        $scope.UploaderBg = new FileUploader({
           url: "/image",
           removeAfterUpload:true,
           onSuccessItem: function(data){
               socket.emit('getImages');
           }
        });
    })
    .controller('MenuController', function($scope, $http,socket) {

        $scope.menuDynamic = [];
        $scope.menuAll = [];
        $scope.menuCurrent = {};
        $scope.menuCurrent.name = "Новое меню";
        $scope.menuCurrent.isSelected = 1;
        $scope.menuCurrent.products = [];
        $scope.menus = [];
        $scope.images = [];
        $scope.groups = [];


        socket.on('updateGroups', function (groups) {
            $scope.groups = groups;
        });

        socket.on('showProducts', function (products) {
            $scope.menuDynamic = products;
            $scope.menuAllUpdate();
            $scope.menuSelect();
        });

        socket.on('updateMenuList', function (menus) {
            $scope.menus = menus;
            $scope.menuCurrentUpdate();
            $scope.menuSelect();
        });

        socket.on('updateImages', function (images) {
            $scope.images = images;
        });

        socket.on('downloadFile', function (file) {
            window.location = file;
        });

        socket.on('showPDF', function (file) {
            var iframe = document.createElement('iframe');
            document.getElementById('pdfContainer').appendChild(iframe);
            iframe.contentWindow.document.write(file);
        });


        $scope.groupToggle = function(code){

           var groups = _.filter($scope.groups, function(group){
               var regexp = new RegExp("^" + code + "\\d{2}$", 'i');
               return group.code.match(regexp);
           });
           if(!groups)return;
           _.each(groups, function(group){
               if(group.active)group.active = false;
               else group.active = true;
           });
           var group = _.findWhere($scope.groups, {code: code});
           if(group.productsShow)group.productsShow = false;
           else group.productsShow = true;
        };

        $scope.groupCheck = function(code){
            if (code.length === 2) return true;
            var group =  _.findWhere($scope.groups, {code: code});
            if (!group) return false;
            return group.active;
        };
        $scope.groupProductCheck = function(code){
            if (code.length === 2) return true;
            var group =  _.findWhere($scope.groups, {code: code});
            if (!group) return false;
            return group.productsShow;
        };

        $scope.groupCompare = function(oldGroup, newGroup){
            if(!oldGroup)oldGroup = {};
            console.log(oldGroup.code +":"+ newGroup.code);
            if(newGroup.name && oldGroup.code !== newGroup.code)return true;
            else return false;
        };

        $scope.menuUpdate = function(){
            socket.emit('updateProducts', $scope.menuDynamic);
        };

        $scope.menuSave = function(){
            socket.emit('updateMenu', $scope.menuCurrent);
        };

        $scope.downloadPDF = function(){
            socket.emit('createPDF', $scope.menuCurrent);
        };

        $scope.getPDF = function(){
            socket.emit('getPDF',$scope.menuCurrent);
        };

        $scope.updateImages = function(){
            socket.emit('updateImages',$scope.images);
        };

        $scope.deleteImage = function(image){
            var index = _.indexOf($scope.images, image);
            $scope.images.splice(index, 1);
            socket.emit('deleteImage',image._id);
        };

        $scope.menuCurrentUpdate = function(){
            angular.forEach($scope.menus,function(menu, property ){
                if(menu.image){
                    if(!menu.image._id){
                        var image = _.findWhere($scope.images, {_id:  menu.image});
                    }else{
                        var image = _.findWhere($scope.images, {_id:  menu.image._id});
                    }
                }
                menu.image = image;
            });
            $scope.menus.push($scope.menuCurrent);
        };


        $scope.menuSelect = function(){
            angular.forEach($scope.menuDynamic,function(product, key){
                var prodAll = _.findWhere($scope.menuCurrent.products, {_id: product._id});
                if(prodAll){
                    product.isCurrent = true;
                }else{
                    product.isCurrent = false;
                }
            })
        };

        $scope.imageSelect = function(){
//            var prodAll = _.findWhere($scope.menuCurrent.products, {_id: product._id});
        };
        $scope.menuAllUpdate = function(){
            angular.forEach($scope.menuDynamic,function(product, key){
                var index = _.findIndex($scope.menuAll, function(val,index){
                    if(val._id == product._id){
                        return {index:index};
                    }
                });
                if(index === -1){
                    $scope.menuAll.push(angular.copy(product));
                }else{
                    angular.forEach(product,function(value, property ){
                        $scope.menuAll[index][property] = value;
                    })
                }
            })
        };



        $scope.productToggle = function(product){
            var prod = _.findWhere($scope.menuAll, {_id: product._id});
            var prodAll = _.findWhere($scope.menuDynamic, {_id: product._id});
            var index = _.findIndex($scope.menuCurrent.products, function(item){
                if(item._id==prod._id)return true;
            });
            if(index===-1){
                prodAll.isCurrent = true;
                $scope.menuCurrent.products.push(prod);
            }else{
                prodAll.isCurrent = false;
                $scope.menuCurrent.products.splice(index, 1);
            }
            $scope.menuCurrent.products.sort($scope.sortByGroup);
        };

        $scope.sortByGroup = function(a,b){
            var lastA = a.group.length - 1;
            var lastB = b.group.length - 1;
            if(a.group[lastA].code < b.group[lastB].code)
                return -1;
            if(a.group[lastA].code > b.group[lastB].code)
                return 1;
            if(a.group[lastA].code === b.group[lastB].code){
                if(a.name < b.name)
                    return -1;
                if(a.name > b.name)
                    return 1;
            }
            return 0
        };

        $scope.productDeleteToggle = function(product){
            if(product.isDelete) product.isDelete = false;
            else {
                if(!product._id){
                    $scope.menuDelete(product);
                    return;
                }
                product.isDelete = true;
                if(product.isCurrent)$scope.productToggle(product);
            }
        };

        $scope.menuAdd = function(){
            $scope.menuDynamic.push({});
        };

        $scope.menuDelete = function(product){
            var index = _.indexOf($scope.menuDynamic, product)
            $scope.menuDynamic.splice(index, 1);
        };



    });